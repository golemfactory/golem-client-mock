/*
 * Golem Activity API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GolemClientMockAPI.ActivityAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExeScriptCommandResult : IEquatable<ExeScriptCommandResult>
    { 
        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index")]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets IsBatchFinished
        /// </summary>
        [DataMember(Name = "IsBatchFinished", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "IsBatchFinished")]
        public bool? IsBatchFinished { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResultEnum
        {
            
            /// <summary>
            /// Enum OkEnum for Ok
            /// </summary>
            [EnumMember(Value = "Ok")]
            OkEnum = 1,
            
            /// <summary>
            /// Enum ErrorEnum for Error
            /// </summary>
            [EnumMember(Value = "Error")]
            ErrorEnum = 2
        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result")]
        public ResultEnum? Result { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExeScriptCommandResult {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsBatchFinished: ").Append(IsBatchFinished).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExeScriptCommandResult)obj);
        }

        /// <summary>
        /// Returns true if ExeScriptCommandResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ExeScriptCommandResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExeScriptCommandResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Index == other.Index ||
                    Index != null &&
                    Index.Equals(other.Index)
                ) &&
                (
                    IsBatchFinished == other.IsBatchFinished ||
                    IsBatchFinished != null &&
                    IsBatchFinished.Equals(other.IsBatchFinished)
                ) &&
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Index != null)
                    hashCode = hashCode * 59 + Index.GetHashCode();
                if (IsBatchFinished != null)
                    hashCode = hashCode * 59 + IsBatchFinished.GetHashCode();
                if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExeScriptCommandResult left, ExeScriptCommandResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExeScriptCommandResult left, ExeScriptCommandResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
