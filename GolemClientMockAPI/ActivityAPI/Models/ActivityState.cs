/*
 * Golem Activity API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GolemClientMockAPI.ActivityAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ActivityState : IEquatable<ActivityState>
    { 
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum NewEnum for New
            /// </summary>
            [EnumMember(Value = "New")]
            NewEnum = 1,
            
            /// <summary>
            /// Enum DeployingEnum for Deploying
            /// </summary>
            [EnumMember(Value = "Deploying")]
            DeployingEnum = 2,
            
            /// <summary>
            /// Enum ReadyEnum for Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            ReadyEnum = 3,
            
            /// <summary>
            /// Enum StartingEnum for Starting
            /// </summary>
            [EnumMember(Value = "Starting")]
            StartingEnum = 4,
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 5,
            
            /// <summary>
            /// Enum UnresponsiveEnum for Unresponsive
            /// </summary>
            [EnumMember(Value = "Unresponsive")]
            UnresponsiveEnum = 6,
            
            /// <summary>
            /// Enum TerminatedEnum for Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            TerminatedEnum = 7
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Reason for Activity termination (specified when Activity in Terminated state).
        /// </summary>
        /// <value>Reason for Activity termination (specified when Activity in Terminated state).</value>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// If error caused state change - error message shall be provided.
        /// </summary>
        /// <value>If error caused state change - error message shall be provided.</value>
        [DataMember(Name="errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityState {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityState)obj);
        }

        /// <summary>
        /// Returns true if ActivityState instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityState other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityState left, ActivityState right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityState left, ActivityState right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
