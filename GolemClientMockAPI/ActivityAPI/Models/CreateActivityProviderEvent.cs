/*
 * Golem Activity API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GolemClientMockAPI.ActivityAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateActivityProviderEvent : ProviderEvent, IEquatable<CreateActivityProviderEvent>
    { 
        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name="agreementId")]
        public string AgreementId { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EventTypeEnum
        {
            
            /// <summary>
            /// Enum CreateActivityEnum for CreateActivity
            /// </summary>
            [EnumMember(Value = "CreateActivity")]
            CreateActivityEnum = 1,
            
            /// <summary>
            /// Enum ExecEnum for Exec
            /// </summary>
            [EnumMember(Value = "Exec")]
            ExecEnum = 2,
            
            /// <summary>
            /// Enum DestroyActivityEnum for DestroyActivity
            /// </summary>
            [EnumMember(Value = "DestroyActivity")]
            DestroyActivityEnum = 3,
            
            /// <summary>
            /// Enum GetStateEnum for GetState
            /// </summary>
            [EnumMember(Value = "GetState")]
            GetStateEnum = 4
        }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType")]
        public EventTypeEnum? EventType { get; set; }

        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [DataMember(Name="activityId")]
        public string ActivityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateActivityProviderEvent {\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateActivityProviderEvent)obj);
        }

        /// <summary>
        /// Returns true if CreateActivityProviderEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateActivityProviderEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateActivityProviderEvent other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AgreementId == other.AgreementId ||
                    AgreementId != null &&
                    AgreementId.Equals(other.AgreementId)
                ) && 
                (
                    EventType == other.EventType ||
                    EventType != null &&
                    EventType.Equals(other.EventType)
                ) && 
                (
                    ActivityId == other.ActivityId ||
                    ActivityId != null &&
                    ActivityId.Equals(other.ActivityId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AgreementId != null)
                    hashCode = hashCode * 59 + AgreementId.GetHashCode();
                    if (EventType != null)
                    hashCode = hashCode * 59 + EventType.GetHashCode();
                    if (ActivityId != null)
                    hashCode = hashCode * 59 + ActivityId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateActivityProviderEvent left, CreateActivityProviderEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateActivityProviderEvent left, CreateActivityProviderEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
