/*
 * Golem Activity API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using GolemClientMockAPI.Attributes;
using GolemClientMockAPI.ActivityAPI.Models;

namespace GolemMarketMockAPI.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ActivityStateApiController : ControllerBase
    { 
        /// <summary>
        /// Get usage of specified Activity.
        /// </summary>
        
        /// <param name="activityId"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/activity-api/v1/activity/{activityId}/usage")]
        [ValidateModelState]
        [SwaggerOperation("GetCurrentUsage")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<double?>), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorBase), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual IActionResult GetCurrentUsage([FromRoute][Required]int? activityId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<double?>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorBase));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorBase));

            string exampleJson = null;
            exampleJson = "[ 0.8008281904610115, 0.8008281904610115 ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<double?>>(exampleJson)
            : default(List<double?>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get running command for a specified Activity.
        /// </summary>
        
        /// <param name="activityId"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/activity-api/v1/activity/{activityId}/command")]
        [ValidateModelState]
        [SwaggerOperation("GetRunningCommand")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExeScriptCommand), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorBase), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual IActionResult GetRunningCommand([FromRoute][Required]int? activityId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExeScriptCommand));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorBase));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorBase));

            string exampleJson = null;
            exampleJson = "{\n  \"params\" : [ \"params\", \"params\" ],\n  \"command\" : \"command\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExeScriptCommand>(exampleJson)
            : default(ExeScriptCommand);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get state of specified Activity.
        /// </summary>
        
        /// <param name="activityId"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/activity-api/v1/activity/{activityId}/state")]
        [ValidateModelState]
        [SwaggerOperation("GetState")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityState), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorBase), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual IActionResult GetState([FromRoute][Required]int? activityId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityState));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorBase));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorBase));

            string exampleJson = null;
            exampleJson = "{\n  \"reason\" : \"reason\",\n  \"errorMessage\" : \"errorMessage\",\n  \"state\" : \"New\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ActivityState>(exampleJson)
            : default(ActivityState);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
