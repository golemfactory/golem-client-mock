/*
 * Golem Activity API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using GolemClientMockAPI.Attributes;
using GolemClientMockAPI.ActivityAPI.Models;
using GolemClientMockAPI.Processors;
using GolemClientMockAPI.Repository;
using GolemClientMockAPI.Mappers;
using GolemClientMockAPI.Security;
using System.Threading.Tasks;
using System.Linq;

namespace GolemMarketMockAPI.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [GolemClientAuthorizationFilter(DefaultNodeId = "DummyProviderNodeId")]
    public class ActivityProviderGatewayApiController : ControllerBase
    {

        public IProviderActivityProcessor ActivityProcessor { get; set; }
        public IAgreementRepository AgreementRepository { get; set; }
        public IActivityRepository ActivityRepository { get; set; }
        public ExeScriptMapper ExeScriptMapper { get; set; }
        public ActivityProviderEventMapper EventMapper { get; set; }

        public ActivityProviderGatewayApiController(IProviderActivityProcessor activityProcessor,
            IAgreementRepository agreementRepository,
            IActivityRepository activityRepository,
            ExeScriptMapper exeScriptMapper,
            ActivityProviderEventMapper eventMapper)
        {
            this.ActivityProcessor = activityProcessor;
            this.AgreementRepository = agreementRepository;
            this.ActivityRepository = activityRepository;
            this.ExeScriptMapper = exeScriptMapper;
            this.EventMapper = eventMapper;
        }

        /// <summary>
        /// Queries for ExeScript batch results.
        /// </summary>

        /// <param name="timeout"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/activity-api/v1/activity/events")]
        [ValidateModelState]
        [SwaggerOperation("CollectActivityEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProviderEvent>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(GolemClientMockAPI.ActivityAPI.Models.ProblemDetails), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual async Task<IActionResult> CollectActivityEvents([FromQuery]int? timeout)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            try
            {
                var events = await this.ActivityProcessor.CollectActivityEventsAsync(clientContext.NodeId ,timeout ?? 15000);

                var result = events.Select(ev => this.EventMapper.Map(ev)).ToList();

                return this.Ok(result);
            }
            catch (Exception exc)
            {
                return this.StatusCode(500, new ErrorBase() { Message = exc.Message });
            }
        }

        /// <summary>
        /// Pass activity state (which may include error details)
        /// </summary>

        /// <param name="activityId"></param>
        /// <param name="state"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpPut]
        [Route("/activity-api/v1/activity/{activityId}/state")]
        [ValidateModelState]
        [SwaggerOperation("PutActivityStateDetails")]
        [SwaggerResponse(statusCode: 403, type: typeof(GolemClientMockAPI.ActivityAPI.Models.ProblemDetails), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(GolemClientMockAPI.ActivityAPI.Models.ProblemDetails), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual IActionResult PutActivityStateDetails([FromRoute][Required]string activityId, [FromBody]ActivityStateDetails state)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            try
            {
                var activity = this.ActivityRepository.GetActivity(activityId);

                if (activity == null)
                {
                    return this.StatusCode(404); // Activity not found
                }

                if (activity.ProviderNodeId != clientContext.NodeId)
                {
                    return this.StatusCode(403); // Not entitled to act on the activity
                }

                var stateDetailsEntity = new GolemClientMockAPI.Entities.ActivityStateDetails()
                {
                    CurrentCommand = "",
                    State = (GolemClientMockAPI.Entities.ActivityState)state.State,
                    UsageVector = state.CurrentUsage?.Select(item => (decimal)item).ToArray()
                };

                this.ActivityProcessor.SendActivityStateDetails(activityId, stateDetailsEntity);

                return this.Ok();
            }
            catch (Exception exc)
            {
                return this.StatusCode(500, new DestroyActivityError() { Message = exc.Message });
            }


            throw new NotImplementedException();
        }

        /// <summary>
        /// Pass result of individual ExeScript command executed within the batch.
        /// </summary>
        
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandResult"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpPut]
        [Route("/activity-api/v1/activity/{activityId}/exec/{batchId}")]
        [ValidateModelState]
        [SwaggerOperation("PutExeScriptResult")]
        [SwaggerResponse(statusCode: 403, type: typeof(GolemClientMockAPI.ActivityAPI.Models.ProblemDetails), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(GolemClientMockAPI.ActivityAPI.Models.ProblemDetails), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorBase), description: "Server Error")]
        public virtual IActionResult PutExeScriptResult([FromRoute][Required]string activityId, [FromRoute][Required]string batchId, [FromBody]ExeScriptCommandResult commandResult)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            try
            {
                var activity = this.ActivityRepository.GetActivity(activityId);

                if (activity == null)
                {
                    return this.StatusCode(404); // Agreement not found
                }

                if (activity.ProviderNodeId != clientContext.NodeId)
                {
                    return this.StatusCode(403); // Not entitled to act on the activity
                }

                this.ActivityProcessor.SendActivityExecResult(activityId, batchId, this.ExeScriptMapper.MapResultToEntity(commandResult));

                return this.Ok();
            }
            catch (Exception exc)
            {
                return this.StatusCode(500, new DestroyActivityError() { Message = exc.Message });
            }

        }
    }
}
