/*
 * Golem Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using GolemClientMockAPI.Attributes;
using GolemMarketMockAPI.MarketAPI.Models;
using Swashbuckle.AspNetCore.Annotations;
using GolemClientMockAPI.Repository;
using GolemClientMockAPI.Processors;
using GolemClientMockAPI.Mappers;
using GolemClientMockAPI.Security;

namespace GolemMarketMockAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [GolemClientAuthorizationFilter(DefaultNodeId = "DummyRequestorNodeId")]
    //[Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
    public class MarketRequestorApiController : Controller
    {
        public IRequestorMarketProcessor MarketProcessor { get; set; }
        public ISubscriptionRepository SubscriptionRepository { get; set; }
        public IProposalRepository ProposalRepository { get; set; }
        public IAgreementRepository AgreementRepository { get; set; }

        public MarketRequestorEventMapper RequestorEventMapper { get; set; }
        public DemandMapper DemandMapper { get; set; }
        public OfferMapper OfferMapper { get; set; }

        public MarketRequestorApiController(IRequestorMarketProcessor marketProcessor,
            ISubscriptionRepository subscriptionRepository,
            IProposalRepository proposalRepository,
            IAgreementRepository agreementRepository,
            MarketRequestorEventMapper requestorEventMapper,
            DemandMapper demandMapper,
            OfferMapper offerMapper)
        {
            this.MarketProcessor = marketProcessor;
            this.SubscriptionRepository = subscriptionRepository;
            this.ProposalRepository = proposalRepository;
            this.AgreementRepository = agreementRepository;
            this.RequestorEventMapper = requestorEventMapper;
            this.DemandMapper = demandMapper;
            this.OfferMapper = offerMapper;
        }

        /// <summary>
        /// Cancels agreement.
        /// </summary>

        /// <param name="agreementId"></param>
        /// <response code="204">Agreement cancelled.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="409">Agreement already approved.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/market-api/v1/agreements/{agreementId}")]
        [ValidateModelState]
        [SwaggerOperation("CancelAgreement")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual async Task<IActionResult> CancelAgreement([FromRoute][Required]string agreementId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the agreement
            var agreement = this.AgreementRepository.GetAgreement(agreementId);

            if (agreement == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != agreement.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var result = await this.MarketProcessor.CancelAgreement(agreementId);

            if(result) // if cancel successful
            {
                return StatusCode(204);
            }
            else
            {
                return StatusCode(409);  // HTTP 409 Conflict
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="timeout"></param>
        /// <param name="maxEvents"></param>
        /// <response code="200">Proposal event list.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/market-api/v1/demands/{subscriptionId}/events")]
        [ValidateModelState]
        [SwaggerOperation("CollectOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "Proposal event list.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual async Task<IActionResult> CollectOffers([FromRoute][Required]string subscriptionId, [FromQuery]float? timeout, [FromQuery]int? maxEvents)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetDemandSubscription(subscriptionId);

            if(subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if(clientContext.NodeId != subscription.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }
            
            var events = await this.MarketProcessor.CollectRequestorEventsAsync(subscriptionId, timeout, (int?)maxEvents);

            var result = events.Select(proposal => this.RequestorEventMapper.Map(proposal))
                               .ToList();

            // Return the collected requestor events (including offer proposals)
            return StatusCode(200, result);
        }

        /// <summary>
        /// Sends Agreement draft to the Provider.
        /// </summary>
        /// <remarks>Confirms Agreement self-created via &#x60;POST /agreements&#x60;</remarks>
        /// <param name="agreementId"></param>
        /// <response code="204">Agreement confirmed.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Agreement cancelled.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/agreements/{agreementId}/confirm")]
        [ValidateModelState]
        [SwaggerOperation("ConfirmAgreement")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult ConfirmAgreement([FromRoute][Required]string agreementId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the agreement
            var agreement = this.AgreementRepository.GetAgreement(agreementId);

            if (agreement == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != agreement.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            this.MarketProcessor.SendConfirmAgreement(agreementId);

            return StatusCode(200);
        }

        /// <summary>
        /// Creates Agreement from selected Proposal.
        /// </summary>
        /// <remarks>Moves given Proposal to &#x60;Approved&#x60; state.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Agreement created.</response>
        /// <response code="400">Bad request.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/agreements")]
        [ValidateModelState]
        [SwaggerOperation("CreateAgreement")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Agreement created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CreateAgreement([FromBody]AgreementProposal agreement)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the offerProposalId
            var offerProposal = this.ProposalRepository.GetOfferProposal(agreement.ProposalId);

            var receivingSubscription = this.SubscriptionRepository.GetDemandSubscription(offerProposal.ReceivingSubscriptionId);

            if (offerProposal == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != receivingSubscription.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var resultAgreement = this.MarketProcessor.CreateAgreement(agreement.ProposalId);

            return StatusCode(201);

        }

        /// <summary>
        /// Responds with a bespoke Demand to received Offer.
        /// </summary>
        /// <remarks>Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to &#x60;Draft&#x60;. Returns created Proposal id. </remarks>
        /// <param name="body"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="201">Counter Proposal created.</response>
        /// <response code="400">Bad request.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/demands/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("CreateProposalDemand")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Counter Proposal created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CreateProposalDemand([FromBody]Proposal demandProposal, [FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetDemandSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var demandEntity = new GolemClientMockAPI.Entities.Demand()
                {
                    NodeId = clientContext.NodeId,
                    Constraints = demandProposal.Constraints,
                    Properties = demandProposal.Properties as Dictionary<string, string>
                };

            try
            {
                var demandProposalEntity = this.MarketProcessor.CreateDemandProposal(subscriptionId, proposalId, demandEntity);

                return new ObjectResult(demandProposalEntity.Id);
            }
            catch (Exception exc)
            {
                return StatusCode(404); // Not Found
            }
        }

        /// <summary>
        /// Fetches Proposal (ie. Offer) with given proposal id.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="200">Proposal.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/market-api/v1/demands/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProposalOffer")]
        [SwaggerResponse(statusCode: 200, type: typeof(Proposal), description: "Proposal.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult GetProposalOffer([FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetDemandSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var offerProposal = this.ProposalRepository.GetOfferProposals(subscriptionId).Where(prop => prop.Id == proposalId).FirstOrDefault();

            if(offerProposal == null)
            {
                return StatusCode(404); // Not Found
            }

            var demandProposal = (offerProposal.DemandId == null) ? 
                                    new GolemClientMockAPI.Entities.DemandProposal() { Id = subscriptionId, Demand = subscription.Demand }  : 
                                    this.ProposalRepository.GetDemandProposal(offerProposal.DemandId);

            var result = this.OfferMapper.MapEntityToProposal(offerProposal);
            
            return StatusCode(200, result);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="subscriptionId"></param>
        /// <param name="queryId"></param>
        /// <param name="propertyValues"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/market-api/v1/demands/{subscriptionId}/propertyQuery/{queryId}")]
        [ValidateModelState]
        [SwaggerOperation("PostQueryResponse")]
        public virtual IActionResult PostQueryResponse([FromRoute][Required]string subscriptionId, [FromRoute][Required]string queryId, [FromBody]PropertyQueryResponse propertyValues)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Rejects Proposal (ie. Offer)
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="204">Proposal rejected.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal already rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/market-api/v1/demands/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("RejectProposalOffer")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult RejectProposalOffer([FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Publishes Demand
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Subscribed.</response>
        /// <response code="400">Bad request.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/demands")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeDemand")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Subscribed.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult SubscribeDemand([FromBody]Demand body)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var demandEntity = this.DemandMapper.MapToEntity(body);

            demandEntity.NodeId = clientContext.NodeId;

            var subscription = this.MarketProcessor.SubscribeDemand(demandEntity);

            // return created Subscription Id
            return StatusCode(201, subscription.Id);
        }

        /// <summary>
        /// 
        /// </summary>

        /// <param name="subscriptionId"></param>
        /// <response code="204">Demand revoked.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Already unsubscribed.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/market-api/v1/demands/{subscriptionId}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeDemand")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult UnsubscribeDemand([FromRoute][Required]string subscriptionId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetDemandSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            this.MarketProcessor.UnsubscribeDemand(subscriptionId);

            return StatusCode(204);
        }

        /// <summary>
        /// Waits for Agreement approval by the Provider.
        /// </summary>
        /// <param name="agreementId"></param>
        /// <param name="timeout"></param>
        /// <response code="200">Agreement approval result.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/agreements/{agreementId}/wait")]
        [ValidateModelState]
        [SwaggerOperation("WaitForApproval")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Agreement approval result.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public async virtual Task<IActionResult> WaitForApproval([FromRoute][Required]string agreementId, [FromQuery]int? timeout)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the agreement
            var agreement = this.AgreementRepository.GetAgreement(agreementId);

            if (agreement == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != agreement.Demand.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }


            var result = await this.MarketProcessor.WaitConfirmAgreementResponseAsync(agreementId, 10000);

            switch (result)
            {
                case GolemClientMockAPI.Entities.AgreementResultEnum.Approved:
                    return StatusCode(200);
                case GolemClientMockAPI.Entities.AgreementResultEnum.Rejected:
                    return StatusCode(406); // Not Acceptable = Rejected
                case GolemClientMockAPI.Entities.AgreementResultEnum.Timeout:
                default:
                    return StatusCode(408); // Timeout
            }
            
        }
    }
}
