/*
 * Golem Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using GolemClientMockAPI.Attributes;
using GolemMarketMockAPI.MarketAPI.Models;
using Swashbuckle.AspNetCore.Annotations;
using GolemClientMockAPI.Security;
using GolemClientMockAPI.Processors;
using GolemClientMockAPI.Repository;
using GolemClientMockAPI.Mappers;

namespace GolemMarketMockAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Produces("application/json")]
    [GolemClientAuthorizationFilter(DefaultNodeId = "DummyProviderNodeId")]
    //[Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
    public class MarketProviderApiController : Controller
    {

        public IProviderMarketProcessor MarketProcessor { get; set; }
        public ISubscriptionRepository SubscriptionRepository { get; set; }
        public IProposalRepository ProposalRepository { get; set; }
        public IAgreementRepository AgreementRepository { get; set; }

        public MarketProviderEventMapper ProviderEventMapper { get; set; }
        public DemandMapper DemandMapper { get; set; }
        public OfferMapper OfferMapper { get; set; }

        public MarketProviderApiController(IProviderMarketProcessor marketProcessor,
            ISubscriptionRepository subscriptionRepository,
            IProposalRepository proposalRepository,
            IAgreementRepository agreementRepository,
            MarketProviderEventMapper providerEventMapper,
            OfferMapper offerMapper,
            DemandMapper demandMapper)
        {
            this.MarketProcessor = marketProcessor;
            this.SubscriptionRepository = subscriptionRepository;
            this.ProposalRepository = proposalRepository;
            this.AgreementRepository = agreementRepository;
            this.ProviderEventMapper = providerEventMapper;
            this.OfferMapper = offerMapper;
            this.DemandMapper = demandMapper;
        }


        /// <summary>
        /// Approves Agreement proposed by the Reqestor.
        /// </summary>

        /// <param name="agreementId"></param>
        /// <response code="204">Agreement approved.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="409">Agreement already rejected.</response>
        /// <response code="410">Agreement cancelled by Requstor.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/agreements/{agreementId}/approve")]
        [ValidateModelState]
        [SwaggerOperation("ApproveAgreement")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult ApproveAgreement([FromRoute][Required]string agreementId)
        { 
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the agreement
            var agreement = this.AgreementRepository.GetAgreement(agreementId);

            if (agreement == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != agreement.Offer.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var agreementEntity = this.MarketProcessor.ApproveAgreement(agreementId);

            if(agreementEntity.State == GolemClientMockAPI.Entities.AgreementState.Cancelled)
            {
                return StatusCode(410, "Cancelled");
            }

            return StatusCode(204, "OK");

        }

        /// <summary>
        /// 
        /// </summary>

        /// <param name="subscriptionId"></param>
        /// <param name="timeout"></param>
        /// <param name="maxEvents"></param>
        /// <response code="200">Proposal or Agreement event list.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/market-api/v1/offers/{subscriptionId}/events")]
        [ValidateModelState]
        [SwaggerOperation("CollectDemands")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "Proposal or Agreement event list.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual async Task<IActionResult> CollectDemands([FromRoute][Required]string subscriptionId, [FromQuery]int? timeout, [FromQuery]int? maxEvents)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetOfferSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Offer.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var events = await this.MarketProcessor.CollectProviderEventsAsync(subscriptionId, timeout, (int?)maxEvents);

            var result = events.Select(proposal => this.ProviderEventMapper.Map(proposal))
                                   .ToList();

            // Return the collected requestor events (including offer proposals)
            return StatusCode(200, result);
        }

        /// <summary>
        /// Responds with a bespoke Offer to received Demand.
        /// </summary>
        /// <remarks>Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to &#x60;Draft&#x60;. Returns created Proposal id. </remarks>
        /// <param name="body"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="201">Counter Proposal created.</response>
        /// <response code="400">Bad request.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/offers/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("CreateProposalOffer")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Counter Proposal created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CreateProposalOffer([FromBody]Proposal body, [FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }


        /// <summary>
        /// Fetches Proposal (ie. Demand) with given proposal id.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="200">Proposal.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/market-api/v1/offers/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProposalDemand")]
        [SwaggerResponse(statusCode: 200, type: typeof(Proposal), description: "Proposal.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult GetProposalDemand([FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetOfferSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Offer.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            var demandProposal = this.ProposalRepository.GetDemandProposals(subscriptionId).Where(prop => prop.Id == proposalId).FirstOrDefault();

            if (demandProposal == null)
            {
                return StatusCode(404); // Not Found
            }

            var offerProposal = (demandProposal.OfferId == null) ?
                                    new GolemClientMockAPI.Entities.OfferProposal() { Id = subscriptionId, Offer = subscription.Offer } :
                                    this.ProposalRepository.GetOfferProposal(demandProposal.OfferId);

            var result = this.DemandMapper.MapEntityToProposal(demandProposal);

            return StatusCode(200, result);
        }

        /// <summary>
        /// 
        /// </summary>

        /// <param name="subscriptionId"></param>
        /// <param name="queryId"></param>
        /// <param name="propertyValues"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/market-api/v1/offers/{subscriptionId}/propertyQuery/{queryId}")]
        [ValidateModelState]
        [SwaggerOperation("PostQueryResponse")]
        public virtual IActionResult PostQueryResponse([FromRoute][Required]string subscriptionId, [FromRoute][Required]string queryId, [FromBody]PropertyQueryResponse propertyValues)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Rejects Agreement proposed by the Requestor.
        /// </summary>
        /// <param name="agreementId"></param>
        /// <response code="204">Agreement rejected.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="409">Agreement already approved.</response>
        /// <response code="410">Agreement cancelled by Requstor.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/agreements/{agreementId}/reject")]
        [ValidateModelState]
        [SwaggerOperation("RejectAgreement")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult RejectAgreement([FromRoute][Required]string agreementId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            // locate the agreement
            var agreement = this.AgreementRepository.GetAgreement(agreementId);

            if (agreement == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != agreement.Offer.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            this.MarketProcessor.RejectAgreement(agreementId);

            return StatusCode(204);
        }

        /// <summary>
        /// Rejects Proposal (ie. Demand)
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="proposalId"></param>
        /// <response code="204">Proposal rejected.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Proposal already rejected.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/market-api/v1/offers/{subscriptionId}/proposals/{proposalId}")]
        [ValidateModelState]
        [SwaggerOperation("RejectProposalDemand")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult RejectProposalDemand([FromRoute][Required]string subscriptionId, [FromRoute][Required]string proposalId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Publishes Offer
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Subscribed.</response>
        /// <response code="400">Bad request.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/market-api/v1/offers")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeOffer")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Subscribed.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult SubscribeOffer([FromBody]Offer body) 
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var offerEntity = this.OfferMapper.MapToEntity(body);

            offerEntity.NodeId = clientContext.NodeId;

            var subscription = this.MarketProcessor.SubscribeOffer(offerEntity);

            // return created Subscription Id
            return StatusCode(201, subscription.Id);
        }


        /// <summary>
        /// 
        /// </summary>

        /// <param name="subscriptionId"></param>
        /// <response code="204">Offer revoked.</response>
        /// <response code="401">Authorization information is missing or invalid.</response>
        /// <response code="404">The specified resource was not found.</response>
        /// <response code="410">Already unsubscribed.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/market-api/v1/offers/{subscriptionId}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeOffer")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization information is missing or invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult UnsubscribeOffer([FromRoute][Required]string subscriptionId)
        {
            var clientContext = this.HttpContext.Items["ClientContext"] as GolemClientMockAPI.Entities.ClientContext;

            var subscription = this.SubscriptionRepository.GetOfferSubscription(subscriptionId);

            if (subscription == null)
            {
                return StatusCode(404); // Not Found
            }

            if (clientContext.NodeId != subscription.Offer.NodeId)
            {
                return StatusCode(401); // Unauthorized
            }

            this.MarketProcessor.UnsubscribeOffer(subscriptionId);

            return StatusCode(204);
        }
    }
}
