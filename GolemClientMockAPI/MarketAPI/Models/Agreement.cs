/*
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.4.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GolemMarketMockAPI.MarketAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Agreement : IEquatable<Agreement>
    { 
        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [Required]
        [DataMember(Name="agreementId")]
        public string AgreementId { get; set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        [Required]
        [DataMember(Name="demand")]
        public Demand Demand { get; set; }

        /// <summary>
        /// Gets or Sets Offer
        /// </summary>
        [Required]
        [DataMember(Name="offer")]
        public Offer Offer { get; set; }

        /// <summary>
        /// End of validity period. Agreement needs to be accepted, rejected or cancellled before this date; otherwise will expire 
        /// </summary>
        /// <value>End of validity period. Agreement needs to be accepted, rejected or cancellled before this date; otherwise will expire </value>
        [Required]
        [DataMember(Name="validTo")]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// date of the Agreement approval
        /// </summary>
        /// <value>date of the Agreement approval</value>
        [DataMember(Name="approvedDate")]
        public DateTime? ApprovedDate { get; set; }

        /// <summary>
        /// * `Proposal` - newly created by a Requestor (based on Proposal) * `Pending` - confirmed by a Requestor and send to Provider for approval * `Cancelled` by a Requestor * `Rejected` by a Provider * `Approved` by both sides * `Expired` - not accepted, rejected nor cancelled within validity period * `Terminated` - finished after approval. 
        /// </summary>
        /// <value>* `Proposal` - newly created by a Requestor (based on Proposal) * `Pending` - confirmed by a Requestor and send to Provider for approval * `Cancelled` by a Requestor * `Rejected` by a Provider * `Approved` by both sides * `Expired` - not accepted, rejected nor cancelled within validity period * `Terminated` - finished after approval. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ProposalEnum for Proposal
            /// </summary>
            [EnumMember(Value = "Proposal")]
            ProposalEnum = 0,
            /// <summary>
            /// Enum PendingEnum for Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            PendingEnum = 1,
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 2,
            /// <summary>
            /// Enum RejectedEnum for Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            RejectedEnum = 3,
            /// <summary>
            /// Enum ApprovedEnum for Approved
            /// </summary>
            [EnumMember(Value = "Approved")]
            ApprovedEnum = 4,
            /// <summary>
            /// Enum ExpiredEnum for Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            ExpiredEnum = 5,
            /// <summary>
            /// Enum TerminatedEnum for Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            TerminatedEnum = 6        }

        /// <summary>
        /// * &#x60;Proposal&#x60; - newly created by a Requestor (based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not accepted, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. 
        /// </summary>
        /// <value>* &#x60;Proposal&#x60; - newly created by a Requestor (based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not accepted, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. </value>
        [Required]
        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets ProposedSignature
        /// </summary>
        [DataMember(Name="proposedSignature")]
        public string ProposedSignature { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedSignature
        /// </summary>
        [DataMember(Name="approvedSignature")]
        public string ApprovedSignature { get; set; }

        /// <summary>
        /// Gets or Sets CommittedSignature
        /// </summary>
        [DataMember(Name="committedSignature")]
        public string CommittedSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agreement {\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ProposedSignature: ").Append(ProposedSignature).Append("\n");
            sb.Append("  ApprovedSignature: ").Append(ApprovedSignature).Append("\n");
            sb.Append("  CommittedSignature: ").Append(CommittedSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Agreement)obj);
        }

        /// <summary>
        /// Returns true if Agreement instances are equal
        /// </summary>
        /// <param name="other">Instance of Agreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agreement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AgreementId == other.AgreementId ||
                    AgreementId != null &&
                    AgreementId.Equals(other.AgreementId)
                ) && 
                (
                    Demand == other.Demand ||
                    Demand != null &&
                    Demand.Equals(other.Demand)
                ) && 
                (
                    Offer == other.Offer ||
                    Offer != null &&
                    Offer.Equals(other.Offer)
                ) && 
                (
                    ValidTo == other.ValidTo ||
                    ValidTo != null &&
                    ValidTo.Equals(other.ValidTo)
                ) && 
                (
                    ApprovedDate == other.ApprovedDate ||
                    ApprovedDate != null &&
                    ApprovedDate.Equals(other.ApprovedDate)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ProposedSignature == other.ProposedSignature ||
                    ProposedSignature != null &&
                    ProposedSignature.Equals(other.ProposedSignature)
                ) && 
                (
                    ApprovedSignature == other.ApprovedSignature ||
                    ApprovedSignature != null &&
                    ApprovedSignature.Equals(other.ApprovedSignature)
                ) && 
                (
                    CommittedSignature == other.CommittedSignature ||
                    CommittedSignature != null &&
                    CommittedSignature.Equals(other.CommittedSignature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AgreementId != null)
                    hashCode = hashCode * 59 + AgreementId.GetHashCode();
                    if (Demand != null)
                    hashCode = hashCode * 59 + Demand.GetHashCode();
                    if (Offer != null)
                    hashCode = hashCode * 59 + Offer.GetHashCode();
                    if (ValidTo != null)
                    hashCode = hashCode * 59 + ValidTo.GetHashCode();
                    if (ApprovedDate != null)
                    hashCode = hashCode * 59 + ApprovedDate.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ProposedSignature != null)
                    hashCode = hashCode * 59 + ProposedSignature.GetHashCode();
                    if (ApprovedSignature != null)
                    hashCode = hashCode * 59 + ApprovedSignature.GetHashCode();
                    if (CommittedSignature != null)
                    hashCode = hashCode * 59 + CommittedSignature.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Agreement left, Agreement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Agreement left, Agreement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
